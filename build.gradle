buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }

    ext {
        junit5Version = '5.1.0'
        postgresDriverVersion = '42.2.5'
        lombokVersion = '1.18.2'
        jacocoToolsVersion = '0.8.2'
        springDependencyManagementVersion = '1.0.3.RELEASE'
        awsSdkVersion = '2.3.5'
        hikariVersion = '3.2.0'
        javaxValidationVersion = '2.0.1.Final'
        hibernateValidatorVersion = '6.0.13.Final'
        javaxelApiVersion = '3.0.0'
        glassfishVersion = '2.2.6'
        hamcrestCoreVersion = '1.3'
        mockitoCoreVersion = '2.+'
        jfrogVersion = '4.+'
    }

    dependencies {
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyManagementVersion"
        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:$jfrogVersion"
    }
}

allprojects {
    apply plugin: 'com.jfrog.artifactory'

    repositories {
        mavenCentral()
    }

    // Common dependencies for all sub modules
    plugins.withType(JavaPlugin) {
        dependencies {
            // Testing
            testCompile("org.hamcrest:hamcrest-core:$hamcrestCoreVersion")
            testCompile("org.mockito:mockito-core:$mockitoCoreVersion")

            // System rules
            testCompile('com.github.stefanbirkner:system-rules:1.17.2')

            // Testcontainers
            testCompile("org.testcontainers:postgresql:1.10.2")

            // JUnit 5
            testCompile("org.junit.jupiter:junit-jupiter-api:$junit5Version")
            testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:$junit5Version")
            testRuntimeOnly("org.junit.vintage:junit-vintage-engine:$junit5Version")
        }
    }
}

// Exclude sub-projects that should be published on their own
def excludedSubprojects = ["lambda-shared"].toArray()

subprojects {
    subProject ->
        repositories {
            mavenCentral()
        }
        if (!excludedSubprojects.contains(subProject.name)) {

            plugins.withType(JavaPlugin) {
                subProject.apply plugin: "io.spring.dependency-management"
                subProject.apply plugin: 'java'
                subProject.apply plugin: "jacoco"

                sourceCompatibility = 1.8
                targetCompatibility = 1.8

                dependencyManagement {
                    imports {
                        mavenBom "software.amazon.awssdk:bom:$awsSdkVersion"
                    }
                }

                dependencies {
                    // Shared library
                    compile project(":lambda-shared")

                    // Lombok
                    compileOnly("org.projectlombok:lombok:$lombokVersion")
                    annotationProcessor "org.projectlombok:lombok:$lombokVersion"
                }

                test {
                    useJUnitPlatform()
                }

                jacoco {
                    toolVersion = "$jacocoToolsVersion"
                }

                test {
                    finalizedBy jacocoTestReport
                    finalizedBy jacocoTestCoverageVerification
                }

                jacocoTestReport {
                    reports {
                        xml.enabled false
                        csv.enabled false
                        html.destination file("${buildDir}/reports/coverage")
                    }
                }

                jacocoTestCoverageVerification {
                    violationRules {
                        rule {
                            limit {
                                minimum = 0.8
                            }
                        }
                    }
                }
                // Task for building the zip file for AWS SAM Testing/upload
                task buildZip(type: Zip) {
                    archiveName = "${subProject.name}.zip"
                    from compileJava
                    from processResources
                    into('lib') {
                        from configurations.runtime
                    }
                }

                build.dependsOn buildZip
            }
        }
}

// runs database submodule and loads data
task startDB(type: Exec, group: 'db') {
    commandLine 'docker-compose', '-f', 'database/docker-compose.yml', 'up', '-d'
}

// spins down the docker database
task stopDB(type: Exec, group: 'db') {
    commandLine 'docker-compose', '-f', 'database/docker-compose.yml', '-v', 'down'
}

// loads demo schema and sample data into running Postgres DB
task loadSchema(type: Exec, group: 'db') {
    commandLine './gradlew', 'testUpdate'
}

// spins down the docker database then starts new one back up
task restartDB(type: Exec, group: 'db') {
    commandLine 'docker-compose', '-f', 'database/docker-compose.yml', '-v', 'down', '&&', 'docker-compose', '-f', 'database/docker-compose.yml', 'up', '-d'
}